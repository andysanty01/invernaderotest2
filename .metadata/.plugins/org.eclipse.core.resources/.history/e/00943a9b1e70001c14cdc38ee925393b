package minimarketdemo.model.proyectos.managers;

import java.util.Date;
import java.util.List;

import javax.ejb.EJB;
import javax.ejb.LocalBean;
import javax.ejb.Stateless;

import minimarketdemo.model.auditoria.managers.ManagerAuditoria;
import minimarketdemo.model.core.entities.PryProyecto;
import minimarketdemo.model.core.entities.PryTarea;
import minimarketdemo.model.core.entities.SegUsuario;
import minimarketdemo.model.core.managers.ManagerDAO;
import minimarketdemo.model.core.utils.ModelUtil;
import minimarketdemo.model.seguridades.dtos.LoginDTO;
import minimarketdemo.model.seguridades.managers.ManagerSeguridades;

/**
 * Session Bean implementation class ManagerProyectos
 */
@Stateless
@LocalBean
public class ManagerProyectos {

	@EJB
	private ManagerDAO mDAO;

	@EJB
	private ManagerAuditoria mAuditoria;
	@EJB
	private ManagerSeguridades mSeg;

	public ManagerProyectos() {
	}

	// Funciones del lider de proyectos:

	// ROL: LIDER
	// PROYECTOS
	// Vista de proyectos
	public List<PryProyecto> findAllProyectos() {
		return mDAO.findAll(PryProyecto.class);
	}

	// Inicializar proyectos
	public PryProyecto inicializarProyecto() {
		PryProyecto proyecto = new PryProyecto();
		proyecto.setAvance(0);
		proyecto.setEstado("I");
		proyecto.setFechaInicio(new Date());
		proyecto.setFechaFin(ModelUtil.addDays(new Date(), 30));
		return proyecto;
	}

	// Insercion de proyectos
	public void insertarProyecto(LoginDTO loginDTO, PryProyecto nuevoProyecto) throws Exception {
		if(nuevoProyecto.getFechaFin().before(nuevoProyecto.getFechaInicio())) {
			throw new Exception("La fecha de fin debe ser posterior a la fecha de inicio.");
		}
		mDAO.insertar(nuevoProyecto);
		//Version simple
		//mAuditoria.mostrarLog(getClass(), "Insertar Proyecto", "Proyecto"+nuevoProyecto.getNombre()+"insertado exitosamente"); //Usar reflexion
		//Version compuesta
		mAuditoria.mostrarLog(null, getClass(), null, null);
	}

	// TAREAS
	// Consulta de tareas por proyecto
	public List<PryTarea> findTareasByProyecto(int idPryProyecto) {
		return mDAO.findWhere(PryTarea.class, "o.pryProyecto.idPryProyecto=" + idPryProyecto, "o.fechaInicio");

	}

	// Inicializar tareas
	public PryTarea inicializarTarea(PryProyecto proyecto) {
		PryTarea tarea = new PryTarea();
		tarea.setAvance(0);
		tarea.setFechaInicio(proyecto.getFechaInicio());
		tarea.setFechaFin(proyecto.getFechaFin());
		tarea.setPryProyecto(proyecto); // relacion one to many(relacion)
		return tarea;
	}

	// Inserccion de tarea
	public void insertarTarea(PryTarea nuevaTarea, int idSegUsuario) throws Exception {
		SegUsuario usuario = (SegUsuario) mDAO.findById(SegUsuario.class, idSegUsuario);// buscamos el usuario
		nuevaTarea.setSegUsuario(usuario);// asignamos al usuario a la tarea
		mDAO.insertar(nuevaTarea);
	}

	// ROL: ANALISTA
	// TAREAS
	// Visualizar tareas asignadas a un determinado analista
	public List<PryTarea> findTareasByUsuario(int idSegUsuario) {
		return mDAO.findWhere(PryTarea.class, "o.segUsuario.idSegUsuario=" + idSegUsuario, "o.fechaInicio");
	}

	public void actualizarAvance(PryTarea tarea) throws Exception {
		mDAO.actualizar(tarea);
		// Actualizar avance de proyecto
		// edicion de archivo PryProyecto bidirectional

		// suma de avances del proyecto
		List<PryTarea> listaTareas = findTareasByProyecto(tarea.getPryProyecto().getIdPryProyecto());
		int suma = 0;
		for (PryTarea t : listaTareas) {
			suma += t.getAvance();
		}

		int promedio = suma / listaTareas.size(); // promedio de avances del proyecto
		PryProyecto proyecto = (PryProyecto) mDAO.findById(PryProyecto.class,
				tarea.getPryProyecto().getIdPryProyecto());
		proyecto.setAvance(promedio);
		if (promedio > 0 && promedio < 100) {
			proyecto.setEstado("D");
		} else {
			if (promedio == 100) {
				proyecto.setEstado("F");
			}
		}
		// actualizar avance del proyecto
		mDAO.actualizar(proyecto);
	}

}
